package br.uefs.ecomp.view;

import br.uefs.ecomp.controller.ControllerCliente;
import br.uefs.ecomp.model.ComunicacaoJogo;
import br.uefs.ecomp.model.Jogadores;
import br.uefs.ecomp.model.Sala;
import br.uefs.ecomp.util.LetrasDados;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author Eduardo
 */
public class Play extends javax.swing.JDialog {
    ControllerCliente c;
    private Sala s;
    private Jogadores jogadorLocal;
    
    private MulticastSocket socket;
    
    private Jogadores adm = null;
    private boolean start = false;
    String letras[];
    public int segundos, minutos;
    
    //Hashmap do dicionário para que a verificação da palavra possa ser feito em ordem O(1).
    private Map<String, Integer> map;
    
    //Hashmap para verificar quais palavras foram feitas pelos outros jogadores.
    private Map<Integer, String> pam;
    
    //Lista encadeada de palavras que já foram formadas pelo jogador.
    private LinkedList<String> listaPalavras = new LinkedList<>();
    
    //Lista de botões que já foram selecionados pelo jogador a cada palavra formada. 
    private LinkedList<JButton> btsSelecionados = new LinkedList<>();
    
    //Lista com todos os botões que representam as letras do jogo.
    LinkedList<JButton> butoes = new LinkedList<>();
    
    /**
     * Creates new form play
     */
    public Play(java.awt.Frame parent, boolean modal, ControllerCliente c, Sala s, Map<String, Integer> map, Map<Integer, String> pam, Jogadores j, int i) {
        super(parent, modal);
        initComponents();
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/br/uefs/ecomp/icons/b.png")).getImage());
        this.c = c;
        this.s = s;
        this.map = map;
        this.pam = pam;
        this.info.setText(info.getText()+ s.getNum());
        this.jogadorLocal = j;
        startMulticast(); //Inicia o multicast do jogo!
        
        if (i == 1) {
            this.adm = jogadorLocal;
            //i = 1 significa que foi o primeiro a entrar na sala!
            startConfigs();
        }else{
            //Caso contrário, ele já entrou em uma sala
            this.adm = s.getJogadores().getFirst();
            entrouSala();
        }
        //Evento para quando o jogador fechar a janela de jogo
        this.addWindowListener(new WindowAdapter() {
        @Override
            public void windowClosing(WindowEvent e) {
                try {
                    saiuSala();
                    c.informarSaidaServer(s, jogadorLocal); //Informa ao servidor que se desconectou da sala.
                    dispose();
//                    TelaPrincipal tela = new TelaPrincipal(c, map, pam); //Chama a tela principal novamente.
//                    dispose(); //Desfaz a tela atual.
//                    tela.setVisible(true); //torna visível a tela principa.
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Play.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        letrasAleatorias();
        
    }
    
    public Play(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        b1 = new javax.swing.JButton();
        b2 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        b4 = new javax.swing.JButton();
        b5 = new javax.swing.JButton();
        b6 = new javax.swing.JButton();
        b7 = new javax.swing.JButton();
        b8 = new javax.swing.JButton();
        b9 = new javax.swing.JButton();
        b10 = new javax.swing.JButton();
        b11 = new javax.swing.JButton();
        b12 = new javax.swing.JButton();
        b13 = new javax.swing.JButton();
        b14 = new javax.swing.JButton();
        b15 = new javax.swing.JButton();
        b16 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        palavra = new javax.swing.JLabel();
        enviar = new javax.swing.JButton();
        deletar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        palavras = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        tempo = new javax.swing.JLabel();
        progress = new javax.swing.JProgressBar();
        jLabel2 = new javax.swing.JLabel();
        info = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listaJG = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Boggle");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 102, 0));

        b1.setBackground(new java.awt.Color(2, 2, 23));
        b1.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b1.setForeground(new java.awt.Color(255, 255, 255));
        b1.setText("A");
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        b2.setBackground(new java.awt.Color(2, 2, 23));
        b2.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b2.setForeground(new java.awt.Color(255, 255, 255));
        b2.setText("A");
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b3.setBackground(new java.awt.Color(2, 2, 23));
        b3.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b3.setForeground(new java.awt.Color(255, 255, 255));
        b3.setText("A");
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        b4.setBackground(new java.awt.Color(2, 2, 23));
        b4.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b4.setForeground(new java.awt.Color(255, 255, 255));
        b4.setText("A");
        b4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b4ActionPerformed(evt);
            }
        });

        b5.setBackground(new java.awt.Color(2, 2, 23));
        b5.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b5.setForeground(new java.awt.Color(255, 255, 255));
        b5.setText("A");
        b5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b5ActionPerformed(evt);
            }
        });

        b6.setBackground(new java.awt.Color(2, 2, 23));
        b6.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b6.setForeground(new java.awt.Color(255, 255, 255));
        b6.setText("A");
        b6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });

        b7.setBackground(new java.awt.Color(2, 2, 23));
        b7.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b7.setForeground(new java.awt.Color(255, 255, 255));
        b7.setText("A");
        b7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b7ActionPerformed(evt);
            }
        });

        b8.setBackground(new java.awt.Color(2, 2, 23));
        b8.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b8.setForeground(new java.awt.Color(255, 255, 255));
        b8.setText("A");
        b8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b8ActionPerformed(evt);
            }
        });

        b9.setBackground(new java.awt.Color(2, 2, 23));
        b9.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b9.setForeground(new java.awt.Color(255, 255, 255));
        b9.setText("A");
        b9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b9ActionPerformed(evt);
            }
        });

        b10.setBackground(new java.awt.Color(2, 2, 23));
        b10.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b10.setForeground(new java.awt.Color(255, 255, 255));
        b10.setText("A");
        b10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b10ActionPerformed(evt);
            }
        });

        b11.setBackground(new java.awt.Color(2, 2, 23));
        b11.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b11.setForeground(new java.awt.Color(255, 255, 255));
        b11.setText("A");
        b11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b11ActionPerformed(evt);
            }
        });

        b12.setBackground(new java.awt.Color(2, 2, 23));
        b12.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b12.setForeground(new java.awt.Color(255, 255, 255));
        b12.setText("A");
        b12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b12ActionPerformed(evt);
            }
        });

        b13.setBackground(new java.awt.Color(2, 2, 23));
        b13.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b13.setForeground(new java.awt.Color(255, 255, 255));
        b13.setText("A");
        b13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b13ActionPerformed(evt);
            }
        });

        b14.setBackground(new java.awt.Color(2, 2, 23));
        b14.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b14.setForeground(new java.awt.Color(255, 255, 255));
        b14.setText("A");
        b14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b14ActionPerformed(evt);
            }
        });

        b15.setBackground(new java.awt.Color(2, 2, 23));
        b15.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b15.setForeground(new java.awt.Color(255, 255, 255));
        b15.setText("A");
        b15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b15ActionPerformed(evt);
            }
        });

        b16.setBackground(new java.awt.Color(2, 2, 23));
        b16.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        b16.setForeground(new java.awt.Color(255, 255, 255));
        b16.setText("A");
        b16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b16ActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));
        jPanel2.setForeground(new java.awt.Color(2, 2, 23));

        palavra.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        palavra.setForeground(new java.awt.Color(2, 2, 23));
        palavra.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        palavra.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 1, true));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(palavra, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(palavra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        enviar.setBackground(new java.awt.Color(255, 255, 255));
        enviar.setForeground(new java.awt.Color(255, 255, 255));
        enviar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/uefs/ecomp/icons/accept.png"))); // NOI18N
        enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarActionPerformed(evt);
            }
        });

        deletar.setBackground(new java.awt.Color(255, 255, 255));
        deletar.setForeground(new java.awt.Color(255, 255, 255));
        deletar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/uefs/ecomp/icons/delete.png"))); // NOI18N
        deletar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletarActionPerformed(evt);
            }
        });

        palavras.setEditable(false);
        palavras.setColumns(5);
        palavras.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        palavras.setForeground(new java.awt.Color(2, 2, 23));
        palavras.setLineWrap(true);
        palavras.setRows(5);
        palavras.setToolTipText("");
        palavras.setWrapStyleWord(true);
        palavras.setAutoscrolls(false);
        palavras.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 102, 0), 2, true), "Palavras Formadas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BOTTOM, new java.awt.Font("Maiandra GD", 0, 12), new java.awt.Color(255, 255, 255))); // NOI18N
        jScrollPane1.setViewportView(palavras);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/uefs/ecomp/icons/boggle1.png"))); // NOI18N

        tempo.setFont(new java.awt.Font("Maiandra GD", 1, 18)); // NOI18N
        tempo.setForeground(new java.awt.Color(255, 255, 255));
        tempo.setText("03:00");

        progress.setMaximum(180);
        progress.setToolTipText("");

        jLabel2.setFont(new java.awt.Font("Maiandra GD", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Jogadores");

        info.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        info.setForeground(new java.awt.Color(255, 255, 255));
        info.setText("Log Sala ");

        listaJG.setEditable(false);
        listaJG.setBackground(new java.awt.Color(255, 102, 0));
        listaJG.setColumns(2);
        listaJG.setFont(new java.awt.Font("Monospaced", 0, 14)); // NOI18N
        listaJG.setForeground(new java.awt.Color(255, 255, 255));
        listaJG.setRows(5);
        jScrollPane3.setViewportView(listaJG);

        log.setEditable(false);
        log.setCaretPosition(log.getText().length());
        jScrollPane4.setViewportView(log);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(tempo))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(enviar, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deletar, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(b9, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b10, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b11, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b12, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(b5, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b6, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b7, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b8, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(b13, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b14, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b15, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(b16, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(31, 31, 31)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(info))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(b5, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b6, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b7, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b8, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(b9, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b10, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b11, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b12, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(b13, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b14, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b15, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(b16, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deletar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(tempo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(progress, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(enviar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(info)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 53, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    //Métodos de ação para cada letra da interface.
    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        select(this.b1);
    }//GEN-LAST:event_b1ActionPerformed

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
        select(this.b2);
    }//GEN-LAST:event_b2ActionPerformed

    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b3ActionPerformed
        select(this.b3);
    }//GEN-LAST:event_b3ActionPerformed

    private void b4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b4ActionPerformed
        select(this.b4);
    }//GEN-LAST:event_b4ActionPerformed

    private void b5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b5ActionPerformed
        select(this.b5);
    }//GEN-LAST:event_b5ActionPerformed

    private void b6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b6ActionPerformed
        select(this.b6);
    }//GEN-LAST:event_b6ActionPerformed

    private void b7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b7ActionPerformed
        select(this.b7);
    }//GEN-LAST:event_b7ActionPerformed

    private void b8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b8ActionPerformed
        select(this.b8);
    }//GEN-LAST:event_b8ActionPerformed

    private void b9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b9ActionPerformed
        select(this.b9);
    }//GEN-LAST:event_b9ActionPerformed

    private void b10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b10ActionPerformed
        select(this.b10);
    }//GEN-LAST:event_b10ActionPerformed

    private void b11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b11ActionPerformed
        select(this.b11);
    }//GEN-LAST:event_b11ActionPerformed

    private void b12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b12ActionPerformed
        select(this.b12);
    }//GEN-LAST:event_b12ActionPerformed

    private void b13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b13ActionPerformed
        select(this.b13);
    }//GEN-LAST:event_b13ActionPerformed

    private void b14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b14ActionPerformed
        select(this.b14);
    }//GEN-LAST:event_b14ActionPerformed

    private void b15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b15ActionPerformed
        select(this.b15);
    }//GEN-LAST:event_b15ActionPerformed

    private void b16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b16ActionPerformed
        select(this.b16);
    }//GEN-LAST:event_b16ActionPerformed
    //Fim das funções de cada letra.
    
    public void startConfigs(){
        listaJG.setText(s.stringJogadores());
        
        //log.requestFocus();
        log.setText("Esperando jogadores se conectarem ...");
        log.setText(log.getText()+"\nAproveite para praticar enquanto isso!");
        log.setCaretPosition(log.getText().length());
    }
    
    public void entrouSala(){
        listaJG.setText(s.stringJogadores());
        
        log.requestFocus();
        log.setText("Iniciando partida ... ");
        log.setCaretPosition(log.getText().length());
        
        c.informarEntradaJogo(socket, s, jogadorLocal);
    }
    
    //Envia para o multicast da sala um aviso que saiu do jogo antes de sair.
    public void saiuSala(){
        c.informarSaidaJogo(socket, s, jogadorLocal);
    }
    
    //Método que inicia o multicast do jogo!
    public void startMulticast(){
        try {
            socket = new MulticastSocket(s.getPorta());
            InetAddress enderecoMulticast = InetAddress.getByName("236.52.65.9");
            socket.joinGroup(enderecoMulticast);
            
            byte[] recebe = new byte[1024];
            DatagramPacket datagrama = new DatagramPacket(recebe, recebe.length);
            
            new Thread(){
                @Override
                public void run(){
                    while (true) {
                        try {
                            socket.receive(datagrama);
                            
                            byte[] recebido = datagrama.getData();
                            ByteArrayInputStream bais = new ByteArrayInputStream(recebido);
                            ObjectInputStream ois = new ObjectInputStream(bais);
                            ComunicacaoJogo com = (ComunicacaoJogo) ois.readObject();
                            
                            new Thread(){
                                @Override
                                public void run(){
                                    requisicoes(com);
                                }
                            }.start();
                            
                        } catch (IOException ex) {
                            Logger.getLogger(ControllerCliente.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(ControllerCliente.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
            }.start();
        } catch (IOException ex) {
            Logger.getLogger(ControllerCliente.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    //Método que trata as requisições feita na tela de jogo!
    public void requisicoes(ComunicacaoJogo com){
                //Caso a requisição recebida seja a do mesmo jogador que a enviou ela é ignorada.
                System.out.println("Jogador: " + com.getJogador().getNick() + " r: " + com.getRequisicao());

                if (/*!com.getJogador().getIp().equals(jogadorLocal.getIp())*/ !com.getJogador().getNick().equals(jogadorLocal.getNick())) {
                    //System.out.println("Requisição " + com.getRequisicao() + " do jogador: " + com.getJogador().getNick());

                    //Codificação for 1 significa que um novo jogador iniciou a partida.
                    if (com.getRequisicao() == 1) {
                        log.setText(log.getText()+"\n"+com.getJogador().getNick() + " entrou na partida.");
                        log.setCaretPosition(log.getText().length());
                        
                        s.getJogadores().add(com.getJogador());
                        listaJG.setText(s.stringJogadores());

                        //Se a rodada já foi iniciada e o cliente for o adm da rodada, ele envia os dados da partida!
                        if (start && adm.getNick().equals(jogadorLocal.getNick())) {
                            c.enviarDadosDaPartida(socket, s, jogadorLocal, letras, minutos, segundos, progress.getValue());
                        }else if(!start && s.getJogadores().size() >= 2){
                            //Inicia a partida!
                            iniciarPartida();
                        }
                        return;
                    }
                    //Se a codificação for 2, significa que algum jogador se desconectou da partida!
                    if (com.getRequisicao() == 2) {

                        log.setText(log.getText() + "\n" + com.getJogador().getNick() + " saiu da partida.");
                        log.setCaretPosition(log.getText().length());
                        c.removeJogadorSala(s, com.getJogador());

                        if (adm.getNick().equals(com.getJogador().getNick())) {
                            adm = s.getJogadores().getFirst();
                            System.out.println("Novo Adm da sala: " + adm.getNick());
                        }
                        listaJG.setText(s.stringJogadores());
                        return;
                    }

                    //Se a codificação for 3 e o jogo não estiver iniciado, significa que é a resposta do ADM pra alguém que acabou de entrar.
                    if (com.getRequisicao() == 3 && !start) {
                        int[] tempo = com.getTempo();
                        log.setText(log.getText()+"\nPartida iniciada");
                        log.setCaretPosition(log.getText().length());
                        
                        try {
                            iniciarJogo(tempo[0], tempo[1], tempo[2]);
                        } catch (InterruptedException ex) {
                            Logger.getLogger(Play.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        
                        gerarLetras(com.getDados());
                        return;
                    }

                    //Se a codificação for 4 o ADM está dando inicio a partida!
                    if (com.getRequisicao() == 4) {
                        gerarLetras(com.getDados());
                        iniciarPartida();
                        return;
                    }
                    
                    //Se a codificação for 5, algum jogador está enviando as letras que ele formou!
                    if (com.getRequisicao() == 5) {
                        c.addPontosJogador(s, com.getJogador());
                        return;
                    }
                }
    }

    public void iniciarPartida(){
        //Iniciar a partida aqui e enviar as novas letras dos dados
        //Por uma while pra verificar se deve iniciar a parida novamente.
        
        while (s.getJogadores().size() > 1) {
            if (adm.getNick().equals(jogadorLocal.getNick())) {
                LetrasDados l = new LetrasDados();
                this.letras = l.letrasSort();
                gerarLetras(letras);

                c.iniciarPartida(socket, s, jogadorLocal, letras);
            }
            try {
                for (int i = 5; i >=0; i--) {
                    log.setText(log.getText() + "\nIniciando a partida em " + i + " segundos.");
                    log.setCaretPosition(log.getText().length());
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Play.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                iniciarJogo(2, 60, 0);
            } catch (InterruptedException ex) {
                Logger.getLogger(Play.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    //Inicia a partida assim que mais de um jogador se conecta a sala.
    public void iniciarJogo(int min, int seg, int prog) throws InterruptedException{
        this.start = true;
        
        this.segundos = seg; this.minutos = min;
        
        int progresso = prog;
            
        log.setText(log.getText() + "\nPartida iniciada.");
        log.setCaretPosition(log.getText().length());
            
        while (s.getJogadores().size() > 1) {
            segundos--;

            if (minutos == 0 && segundos == -1) {
                break;
            }
            if (segundos == -1) {
                minutos--;
                segundos = 59;
            }
            if (segundos < 10) {
                tempo.setText("0"+minutos+":"+"0"+segundos);
            }else{
                tempo.setText("0"+minutos+":"+segundos);
            }
            progresso++;
            progress.setValue(progresso);

            try {
                Thread.sleep(1000);
            } catch (InterruptedException ex) {
                Logger.getLogger(Play.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //Verifica se o cliente é o único jogador em sala, caso seja é exibido uma mensagem para ele e não é feito o calculo de vitória.
        if (s.getJogadores().size() == 1) {
            start = false;
            JOptionPane.showMessageDialog(null, "Não existe outros participantes em jogo!", "Fim de Jogo", JOptionPane.INFORMATION_MESSAGE);
            listaPalavras.clear();
            palavras.setText("");
        }else{
            start = false;
            //Envia as letras que ele formou para os outros jogadores.
            c.enviarLetras(socket, s, jogadorLocal, map, listaPalavras);
            Resultado r = new Resultado(null, true, c, pam, s);
            r.setVisible(true);
            
            listaPalavras.clear();
            palavras.setText("");
        }
    }
    
    private void gerarLetras(String[] l){
        this.letras = l;
        
        Iterator itr = butoes.iterator();
        for (int i = 0; itr.hasNext(); i++) {
            JButton b = (JButton) itr.next();
            b.setText(letras[i]);
        }
    }
    
    //---------- métodos da interface do jogo --------------    
    //Método de ação para resetar letras seleciondadas.
    private void deletarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletarActionPerformed
        enableLetras();
    }//GEN-LAST:event_deletarActionPerformed

    //Método para enviar a palavra formada.
    private void enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarActionPerformed
        //Verifica se nenhum botão foi marcado.
        if (palavra.getText().trim().length() < 1) {
            JOptionPane.showMessageDialog(null, "Nenhuma letra selecionada", "Erro", JOptionPane.ERROR_MESSAGE);
        }else if(jaExiste(palavra.getText())){ //Verifica se a palavra formada já está presente na lista de mensagens formadas.
            JOptionPane.showMessageDialog(null,"Esta palavra ja foi formada","Erro", JOptionPane.ERROR_MESSAGE);
            enableLetras(); //Habilita todos botões referentes a letras e limpa o campo de palavra.
        }else if(map.get(palavra.getText().toLowerCase()) == null && map.get(palavra.getText().toUpperCase()) == null ){
            JOptionPane.showMessageDialog(null, "Esta palavra não está presente no dicionário!");
            enableLetras();
        }else{
            //Caso passe em todas as verificações, a palavra formada é inserida na lista de palavras ja formadas
            listaPalavras.add(palavra.getText()); //Adiciona a nova palavra na lista.
            
            //Percorre a lista de palavras concatenando em uma string para ser exibida no TextArea da interface.
            Iterator itr = listaPalavras.iterator();
            String s = "";
            while (itr.hasNext()) {
                s += (String) itr.next() + "\n"; //Concatena as palavras na String
            }
            
            palavras.setText(s); //Seta as palavras no TextArea da interface.
            enableLetras(); //Habilita todos botões referentes a lestras e limpa o campo de palavra.
        }
    }//GEN-LAST:event_enviarActionPerformed

    //Método utilizado para verificar se a palavra formada já foi formada anteriormente.
    private boolean jaExiste(String palavra){
        Iterator itr = listaPalavras.iterator();
        while (itr.hasNext()) {
            String s = (String) itr.next();
            if (s.equals(palavra)) {
                return true;
            }
        }
        return false;
    }
    
    //Método utilizado para desativar botão que foi selecionada.
    public void select(javax.swing.JButton b){
        b.setEnabled(false); //Desativa botão selecionado.
        btsSelecionados.add(b); //Adiciona botão na lista de botões selecionados,
                    //para que depois de formada a palavra ele seja habilitado novamente.
        palavra.setText(palavra.getText()+ b.getText()); //Concatena a String no JLabel para formar a palavra.
    }
    
    //Método utilizado para habilitar novamente todos os botões que foram selecionados pelo jogador.
    private void enableLetras(){
        Iterator itr = btsSelecionados.iterator();
        while (itr.hasNext()) {
            JButton b = (JButton) itr.next();
            b.setEnabled(true);
        }
        btsSelecionados.clear();
        palavra.setText(""); //Seta o campo de palavra como vázio
    }
    
    //Método utilizado para gerar as letras aleatórias.
    private void letrasAleatorias(){
        LetrasDados l = new LetrasDados();
        letras = l.letrasSort();
        buttons();
        Random r = new Random();
        
        Iterator itr = butoes.iterator();
        for (int i = 0; itr.hasNext(); i++) {
            JButton b = (JButton) itr.next();
            b.setText(letras[i]);
        }
    }
    
    //Adiciona todos os botões na lista para que sejam setados seus caracteres.
    public void buttons(){
        butoes.add(b1);
        butoes.add(b2);
        butoes.add(b3);
        butoes.add(b4);
        butoes.add(b5);
        butoes.add(b6);
        butoes.add(b7);
        butoes.add(b8);
        butoes.add(b9);
        butoes.add(b10);
        butoes.add(b11);
        butoes.add(b12);
        butoes.add(b13);
        butoes.add(b14);
        butoes.add(b15);
        butoes.add(b16);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Play.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Play.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Play.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Play.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Play dialog = new Play(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JButton b10;
    private javax.swing.JButton b11;
    private javax.swing.JButton b12;
    private javax.swing.JButton b13;
    private javax.swing.JButton b14;
    private javax.swing.JButton b15;
    private javax.swing.JButton b16;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton b4;
    private javax.swing.JButton b5;
    private javax.swing.JButton b6;
    private javax.swing.JButton b7;
    private javax.swing.JButton b8;
    private javax.swing.JButton b9;
    private javax.swing.JButton deletar;
    private javax.swing.JButton enviar;
    private javax.swing.JLabel info;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea listaJG;
    private javax.swing.JTextPane log;
    private javax.swing.JLabel palavra;
    private javax.swing.JTextArea palavras;
    private javax.swing.JProgressBar progress;
    private javax.swing.JLabel tempo;
    // End of variables declaration//GEN-END:variables
}
